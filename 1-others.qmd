# Outros Tópicos

Outros tópicos. Abaixo alguns possíveis de serem abordados.

---


## Funções Base

Referência: https://docs.python.org/3/library/functions.html

### Funções relacionadas à tipos de variáveis

```{python}
bool(0), bool(1), bool(1811275162543)
```

```{python}
float(10), float(3.5), float('3.5')
```

```{python}
int('8'), int(10.7)
str(8)
```

```{python}
type([1, 2])
```

### Funções sobre iteráveis

```{python}
my_list = ['São Paulo', 'Flamengo']

# o que é um iterável?

enumerate(my_list), list(enumerate(my_list))
#type(enumerate(my_list))
```

```{python}
#sem enumerate:
index = 0
for i in my_list:
    print('Parabéns ' + i + '! Você ficou em ' + str(index + 1) + 'º lugar!')
    index += 1
```

```{python}
#com enumerate:
for index, i in enumerate(my_list):
    print('Parabéns ' + i + '! Você ficou em ' + str(index + 1) + 'º lugar!')

print("cof cof Copa do Brasil cof cof")
```

```{python}
def maior_que_dois(x):
    return x > 2
#Ou utilizar uma função anônima "lambda": lambda x: x > 2

my_list = [1,2,3,4]
print(list(filter(maior_que_dois, my_list)))
print(list(filter(lambda x: x>2, my_list)))
```

```{python}
my_map = list(map(maior_que_dois, my_list)) # map: aplicar uma função para todos os itens
my_map
```

```{python}
print(my_list)
print(my_map)
[my_list, my_map]

[(my_list[i], my_map[i]) for i in range(4)]
list(zip(my_list, my_map))
# zip(): une tuplas, mas é um objeto próprio
# → precisa fazer tuple(zip()) para ver a tupla mesmo
```

### Funções sobre criação de variáveis

```{python}
dict(zip(my_list, my_map))
```

```{python}
list()
```

```{python}
set([1,2,2,3,4])
```

```{python}
tuple(my_list)
```

```{python}
type((1, 2))
```

### Outras funções

```{python}
format() #formata strings (setá tratada na aula de REGEX)
```

```{python}
my_list, repr(my_list), eval(repr(my_list)), eval('1+2')
# eval(): avalia um string para ver se tem como fazer contas lá dentro → se der, devolve quanto que dá
```

```{python}
input() #recebe algum valor do terminal

input("A aula tá legal? ")
```

### Funções matemáticas e lógicas

```{python}
abs() #módulo
divmod(número, divisor) #divisão (parte inteira, resto)
max()
min()
pow(base, expoente)
round(número, digitos)
sum()
all([True, True, False]) # True se todos os argumentos são true
any([True, True, False]) # True se pelo menos um argumento é verdadeiro
```

```{python}
abs(-3), abs(3)
```

```{python}
divmod(7, 5)
```

```{python}
round(3.1263817241864518742612, 4)
```

## Bibliotecas

Agora partimos para funções externas

### Como instalar bibliotecas

Referência: https://packaging.python.org/en/latest/tutorials/installing-packages/

Checar instalação do python (digitar no terminal):
> py --version

Checar instalação do pip, o instalador de pacotes:
> py -m pip --version

Instalar o pacote pelo nome:
> py -m pip install nome_do_pacote

### Módulo math

Referência: https://docs.python.org/3/library/math.html

```{python}
import math
```

```{python}
round(math.pi, 3)
```

```{python}
math.ceil()
math.floor()
math.trunc()
math.modf(5.256) #(0.2560000000000002, 5.0)
```

```{python}
math.comb(k_items, n_opções) #n! / (k! * (n - k)!) ) (sem ordem, sem repetição)
math.perm(k_items, n_opções) #n! / (n - k)! (com ordem, sem repetição)
math.factorial(n)
```

```{python}
math.gcd() #mdc
math.lcm() #mmc
```

```{python}
# abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)
# rel_tol = tolerância relativa
# abs_tol = tolerância absoluta
print(m.isclose(5, 10, rel_tol=0.49, abs_tol=0))
print(m.isclose(5, 10, rel_tol=0, abs_tol=5))
```

```{python}
math.isfinite()
math.isinf()
```

```{python}

2**(0.5), math.sqrt(2)
```

```{python}
print(math.dist((0,0), [1,1])) # distância euclidiana
print(math.hypot(1,1,1,1,1)) # norma euclidiana → distância da origem até o ponto
```

```{python}
math.cos(), math.sin(), math.tan() #etc.
math.degrees(), math.radians() #conversão de um pro outro
```

```{python}
math.e, math.pi, math.inf
```

### Módulo statistics

Referência: https://docs.python.org/3/library/statistics.html

```{python}
import statistics as stat
```

```{python}
stat.mean()
stat.geometric_mean()
stat.harmonic_mean()
stat.median()
stat.mode('aaabbb'), stat.multimode('aaabbbc') #('a', ['a', 'b'])
```

```{python}
stat.quantiles(iterable, n_quantis, method) #método 'inclusive' se a amostra tiver os maiores valores da população, e 'exclusive' (default) c.c.
```

```{python}
stat.stdev(), stat.pstdev()
stat.variance(), stat.pvariance()
#versões amostrais e populacionais, respectivamente
```

```{python}
stat.covariance()
stat.correlation()
```

### Módulo random

Referência: https://docs.python.org/3/library/random.html

```{python}
import random as rd
```

```{python}
rd.seed(seed)
```

```{python}
rd.randint(1, 10), rd.random()
```

```{python}
rd.choices(my_list, weights=[0, 10, 80, 10], cum_weights=None, k=10)
#rd.choices(my_list, weights=None, cum_weights=[0, 10, 90, 100], k=10)
```

```{python}
print(my_list)
rd.shuffle(my_list) #nenhum output
my_list #alterou a lista
```

```{python}
print(rd.sample(my_list, len(my_list), counts=None)) #nova lista
print(my_list) #não alterou a lista
print(rd.sample(my_list, 7, counts=[1, 2, 5, 2]))
#a lista usada foi [3, 2, 2, 4, 4, 4, 4, 4, 1, 1]
```

```{python}
rd.uniform(2, 8)
rd.gauss(mu, sigma)
```

## Funções Sobre Manipulação de Texto

## Funções Não Essenciais

### Funções relacionadas à tipos de variáveis

```{python}
bin(10)
hex(445125215) # números hexadecimais
int('1000', 2) # "1000 base 2"
ord('a'), chr(97) # o item numero 97 no 'dicionário' UNICODE
#chr(ord('a'))
#ord(chr(98))
```

### Funções sobre armazenamento de variáveis

```{python}
a = 10 #lembre deste 10!
repr(dir())
# repr: retorna um string do objeto
# dir: todas os nomes no diretório atual
```

```{python}
repr(dir([1,3]))
```

```{python}
list(globals().items())[1:5]
```

```{python}
dict(list(globals().items()))
dict(list(globals().items()))['__name__']
```

### Outras funções

```{python}
open(file_path, mode) #abre um arquivo
#Mode: 'r', 'w', 'x', 'a'; '+'; 'b' ou 't'
# 'r' = read
# 'w' = write
# 'x' = Create
# 'a' = Append
# 'b' = Binary
# 't' = Text
```

```{python}
help() #abre o prompt de ajuda no terminal
```

### Módulo os

Referência: https://docs.python.org/3/library/os.html, https://www.youtube.com/watch?v=tJxcKyFMTGo

```{python}
import os
```

```{python}
repr(dir(os))
```

```{python}
os.getcwd()
os.chdir('/User/Michel')
```

```{python}
os.listdir()
```

```{python}
os.rmdir('aulas gvcode')
os.removedirs('name/subname')
```

```{python}
os.rename('text.txt', 'new.txt')
```

```{python}
os.stat('text.txt') #tamanho, data de criação e modificação, etc
```

### Módulo ScyPy

Referências: https://docs.scipy.org/doc/scipy/tutorial/index.html#user-guide

+ Estatística: https://scipy.github.io/devdocs/reference/stats.html
+ Otimização: https://scipy.github.io/devdocs/reference/optimize.html
+ Álgebra linear: https://scipy.github.io/devdocs/reference/linalg.html
+ Interpolação: https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.interp1d.html#scipy.interpolate.interp1d

```{python}
import scipy.stats
```

```{python}
scipy.stats.linregress(x, y)
```

Aqui, as funções menos essenciais, de consulta para vocês.

Referência: https://docs.python.org/3/library/functions.html

